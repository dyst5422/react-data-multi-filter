{"version":3,"sources":["../src/DataFilterContext.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,+DAAsD;AACtD,6CAA2D;AAK3D,kCAAkC;AAClC;IACE,MAAM,OAAO,GAAG,8BAAkB,CAe/B;QACD,cAAc,EAAE,EAAE;QAClB,eAAe,EAAE,EAAE;QACnB,OAAO,EAAE,EAAE;QACX,OAAO,EAAE,EAAE;QACX,aAAa,EAAE,EAAE;QACjB,UAAU,EAAE,GAAG,EAAE,GAAE,CAAC;QACpB,aAAa,EAAE,GAAG,EAAE,GAAE,CAAC;QACvB,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;YACjB,cAAc,EAAE,EAAE;YAClB,eAAe,EAAE,EAAE;YACnB,aAAa,EAAE,EAAE;SAClB,CAAC;KACH,CAAC,CAAC;IAEH,kBAAkB,KAA2E;QAC3F,OAAO,CACL,oBAAC,uBAAU,oBAAK,KAAK,GAClB,WAAW,CAAC,EAAE,CAAC,oBAAC,OAAO,CAAC,QAAQ,IAAC,KAAK,EAAE,WAAW,IAAG,KAAK,CAAC,QAAQ,CAAoB,CAC9E,CACd,CAAC;IACJ,CAAC;IAED,kBAAkB,KAqBjB;QACC,OAAO,CACL,oBAAC,OAAO,CAAC,QAAQ,QACd,WAAW,CAAC,EAAE;YACb,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,aAAa,EAAE,GAAG,WAAW,CAAC,UAAU,CAAC;gBAChF,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,OAAO,EAAE,KAAK,CAAC,OAAO;aACvB,CAAC,CAAC;YACH,OAAO,KAAK,CAAC,QAAQ,CAAC;gBACpB,OAAO,EAAE,WAAW,CAAC,OAAO;gBAC5B,cAAc;gBACd,eAAe;gBACf,OAAO,EAAE,WAAW,CAAC,OAAO;gBAC5B,aAAa;gBACb,UAAU,EAAE,WAAW,CAAC,UAAU;gBAClC,YAAY,EAAE,WAAW,CAAC,aAAa;gBACvC,UAAU,EAAE,WAAW,CAAC,UAAU;aACnC,CAAC,CAAC;QACL,CAAC,CACgB,CACpB,CAAC;IACJ,CAAC;IAED,OAAO;QACL,QAAQ;QACR,QAAQ;KACT,CAAC;AACJ,CAAC;AAvFD,0DAuFC;AAEY,QAAA,iBAAiB,GAAG,uBAAuB,EAAE,CAAC","file":"DataFilterContext.js","sourcesContent":["import * as React from 'react';\nimport createReactContext from 'create-react-context';\nimport { DataFilter, DataFilterProps } from './DataFilter';\n\ntype Diff<T extends string, U extends string> = ({ [P in T]: P } & { [P in U]: never } & { [x: string]: never })[T];\ntype Omit<T, K extends keyof T> = Pick<T, Diff<keyof T, K>>;\n\n// tslint:disable-next-line:no-any\nexport function createDataFilterContext<T = any>() {\n  const Context = createReactContext<{\n    filteredInData: T[];\n    filteredOutData: T[];\n    allData: T[];\n    filters: { [key: string]: (datum: T, idx?: number, data?: T[]) => boolean };\n    activeFilters: { [key: string]: (datum: T, idx?: number, data?: T[]) => boolean };\n    addFilters: (filters: { [key: string]: (datum: T, idx?: number, data?: T[]) => boolean }) => void;\n    removeFilters: (removeKeys: string[]) => void;\n    filterData: (\n      opts?: { exclude?: string[]; include?: string[] },\n    ) => {\n      filteredInData: T[];\n      filteredOutData: T[];\n      activeFilters: { [key: string]: (datum: T, idx?: number, data?: T[]) => boolean };\n    };\n  }>({\n    filteredInData: [],\n    filteredOutData: [],\n    allData: [],\n    filters: {},\n    activeFilters: {},\n    addFilters: () => {}, // tslint:disable-line:no-empty\n    removeFilters: () => {}, // tslint:disable-line:no-empty\n    filterData: () => ({\n      filteredInData: [],\n      filteredOutData: [],\n      activeFilters: {},\n    }),\n  });\n\n  function Provider(props: Omit<DataFilterProps<T>, 'children'> & { children: React.ReactNode }) {\n    return (\n      <DataFilter {...props}>\n        {filterProps => <Context.Provider value={filterProps}>{props.children}</Context.Provider>}\n      </DataFilter>\n    );\n  }\n\n  function Consumer(props: {\n    exclude?: string[];\n    include?: string[];\n    children: (\n      props: {\n        filteredInData: T[];\n        filteredOutData: T[];\n        allData: T[];\n        filters: { [key: string]: (datum: T, idx?: number, data?: T[]) => boolean };\n        activeFilters: { [key: string]: (datum: T, idx?: number, data?: T[]) => boolean };\n        addFilters: (filters: { [key: string]: (datum: T, idx?: number, data?: T[]) => boolean }) => void;\n        removeFilter: (removeKeys: string[]) => void;\n        filterData: (\n          opts?: { exclude?: string[]; include?: string[] },\n        ) => {\n          filteredInData: T[];\n          filteredOutData: T[];\n          activeFilters: { [key: string]: (datum: T, idx?: number, data?: T[]) => boolean };\n        };\n      },\n    ) => JSX.Element;\n  }) {\n    return (\n      <Context.Consumer>\n        {filterProps => {\n          const { filteredInData, filteredOutData, activeFilters } = filterProps.filterData({\n            exclude: props.exclude,\n            include: props.include,\n          });\n          return props.children({\n            allData: filterProps.allData,\n            filteredInData,\n            filteredOutData,\n            filters: filterProps.filters,\n            activeFilters,\n            addFilters: filterProps.addFilters,\n            removeFilter: filterProps.removeFilters,\n            filterData: filterProps.filterData,\n          });\n        }}\n      </Context.Consumer>\n    );\n  }\n\n  return {\n    Provider,\n    Consumer,\n  };\n}\n\nexport const DataFilterContext = createDataFilterContext();"]}